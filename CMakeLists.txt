PROJECT(LIFE)
CMAKE_MINIMUM_REQUIRED(VERSION 3.16.0)
INCLUDE(CheckCXXCompilerFlag)



# variabili di configurazione progetto
SET(RELEASE 5)
SET(MAJOR 0)
SET(MINOR 0)
SET(PATCH 0)

SET(PROJECT_VERSION "${RELEASE}.${MAJOR}.${MINOR}.${PATCH}")
SET(PROJECT_UI_NAME "Life ${PROJECT_VERSION}")
SET(ORGANIZATION "DV")
SET(LOG_PATH ${ORGANIZATION}/${PROJECT_NAME}/logs)
STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOW)
SET(PROGRAM_NAMESPACE ${PROJECT_NAME_LOW})

IF (CMAKE_HOST_WIN32)
    SET(SPOOL_PATH_DFLT "$ENV{USERPROFILE}")
    SET(MARKING_CONFIGURATION_PATH_DFLT "$ENV{USERPROFILE}")
ELSEIF(CMAKE_HOST_UNIX)
    SET(SPOOL_PATH_DFLT "$ENV{HOME}")
    SET(MARKING_CONFIGURATION_PATH_DFLT "$ENV{HOME}")
ENDIF()

FILE(TO_CMAKE_PATH ${SPOOL_PATH_DFLT} SPOOL_PATH_DFLT)
STRING(REPLACE "/" "//" SPOOL_PATH_DFLT ${SPOOL_PATH_DFLT}) # aggiungo double quote (consigliato da documentazione cmake)
MESSAGE("SPOOL_PATH: ${SPOOL_PATH_DFLT}")



# controllo se sono in debug o release
IF (CMAKE_BUILD_TYPE)
    IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        SET(DEBUG_MODE TRUE)
        MESSAGE("Compilazione: DEBUG MODE")
    ELSE()
        SET(DEBUG_MODE FALSE)
        MESSAGE("Compilazione: RELEASE MODE")
    ENDIF()
        STRING(TOLOWER ${CMAKE_BUILD_TYPE} BUILT_TYPE_STR_LOWER_CASE)
        MESSAGE("BUILT_TYPE_STR_LOWER_CASE: ${BUILT_TYPE_STR_LOWER_CASE}")
ELSE()
    SET(DEBUG_MODE FALSE)
    MESSAGE("Compilazione: RELEASE MODE")
ENDIF()




# variabili di impostazione ambiente
SET(FLAG_CN_PRESENT OFF CACHE BOOL "CN presente")
SET(FLAG_PLC_PRESENT OFF CACHE BOOL "PLC presente")
SET(FLAG_MOCK_MOTION OFF CACHE BOOL "Mocking valori")
SET(FLAG_LOG_VERBOSE OFF CACHE BOOL "Abilita log verbose")
SET(FLAG_LOG_BOOST ON CACHE BOOL "Boost log") # abilito di default log boost
SET(FLAG_LOG_QT OFF CACHE BOOL "Boost log")

MESSAGE("FLAG_CN_PRESENT: ${FLAG_CN_PRESENT}")
MESSAGE("FLAG_PLC_PRESENT: ${FLAG_PLC_PRESENT}")
MESSAGE("FLAG_MOCK_MOTION: ${FLAG_MOCK_MOTION}")
MESSAGE("FLAG_LOG_VERBOSE: ${FLAG_LOG_VERBOSE}")
MESSAGE("FLAG_LOG_BOOST: ${FLAG_LOG_BOOST}")
MESSAGE("FLAG_LOG_QT: ${FLAG_LOG_QT}")

IF (CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(ARCHITECTURE "x64")
ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 4)
    SET(ARCHITECTURE "x86")
ENDIF()
MESSAGE("ARCHITECTURE: ${ARCHITECTURE}")

# controllo che almeno una modalita' di logging sia abilitata
IF ((NOT FLAG_LOG_BOOST) AND (NOT FLAG_LOG_QT))
    MESSAGE(SEND_ERROR "Selezionare almeno una modalita' di logging")
ELSEIF(FLAG_LOG_BOOST AND FLAG_LOG_QT)
    MESSAGE(SEND_ERROR "Selezionare solo una modalita' di logging")
ENDIF()

IF(FLAG_LOG_VERBOSE)
    ADD_DEFINITIONS(-DLOG_VERBOSE)
ELSE()
    REMOVE_DEFINITIONS(-DLOG_VERBOSE)
ENDIF()

IF(FLAG_CN_PRESENT)
    ADD_DEFINITIONS(-DFLAG_CN_PRESENT)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_CN_PRESENT)
ENDIF()

IF(FLAG_PLC_PRESENT)
    ADD_DEFINITIONS(-DFLAG_PLC_PRESENT)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_PLC_PRESENT)
ENDIF()

IF(FLAG_MOCK_MOTION)
    ADD_DEFINITIONS(-DFLAG_MOCK_MOTION_PRESENT)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_MOCK_MOTION_PRESENT)
ENDIF()

IF(FLAG_LOG_BOOST)
    ADD_DEFINITIONS(-DFLAG_LOG_BOOST)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_LOG_BOOST)
ENDIF()

IF(FLAG_LOG_QT)
    ADD_DEFINITIONS(-DFLAG_LOG_QT)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_LOG_QT)
ENDIF()

IF(DEBUG_MODE)
    ADD_DEFINITIONS(-DDEBUG_MODE)
ELSE()
    REMOVE_DEFINITIONS(-DDEBUG_MODE)
ENDIF()




# parametri compilatore
SET(CPP_STD_NUM 17)
SET(CPP_STD_STR "-std=c++${CPP_STD_NUM}")
MESSAGE("CPP_STD_STR: ${CPP_STD_STR}")
CHECK_CXX_COMPILER_FLAG(${CPP_STD_STR} COMPILER_SUPPORTS_CXXSTD)
IF(COMPILER_SUPPORTS_CXXSTD)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CPP_STD_STR}")
  SET(CMAKE_CXX_STANDARD ${CPP_STD_NUM})
ENDIF()

IF (NOT MSVC)
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-reorder -Wno-long-long -pedantic -Wno-comment -fPIC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-missing-noreturn -Wno-reorder -Wno-long-long -pedantic -Wno-comment")
ENDIF(NOT MSVC)
SET(CMAKE_VERBOSE_MAKEFILE TRUE)
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

MESSAGE("CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
MESSAGE("CMAKE_CXX_STANDARD: ${CMAKE_CXX_STANDARD}")


# configurazione qt
FIND_PACKAGE(Qt5 COMPONENTS
    Core
    Qml
    Gui
    Network
    Test
    REQUIRED
    )

MESSAGE("Qt5Core_VERSION: ${Qt5Core_VERSION}")
MESSAGE("Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
MESSAGE("Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
MESSAGE("Qt5Core_DEFINITIONS: ${Qt5Core_DEFINITIONS}")
MESSAGE("Qt5Core_COMPILE_DEFINITIONS: ${Qt5Core_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Core_FOUND: ${Qt5Core_FOUND}")
MESSAGE("Qt5Core_EXECUTABLE_COMPILE_FLAGS: ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Qml_VERSION: ${Qt5Qml_VERSION}")
MESSAGE("Qt5Qml_LIBRARIES: ${Qt5Qml_LIBRARIES}")
MESSAGE("Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
MESSAGE("Qt5Qml_DEFINITIONS: ${Qt5Qml_DEFINITIONS}")
MESSAGE("Qt5Qml_COMPILE_DEFINITIONS: ${Qt5Qml_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Qml_FOUND: ${Qt5Qml_FOUND}")
MESSAGE("Qt5Qml_EXECUTABLE_COMPILE_FLAGS: ${Qt5Qml_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Gui_VERSION: ${Qt5Gui_VERSION}")
MESSAGE("Qt5Gui_LIBRARIES: ${Qt5Gui_LIBRARIES}")
MESSAGE("Qt5Gui_INCLUDE_DIRS: ${Qt5Gui_INCLUDE_DIRS}")
MESSAGE("Qt5Gui_DEFINITIONS: ${Qt5Gui_DEFINITIONS}")
MESSAGE("Qt5Gui_COMPILE_DEFINITIONS: ${Qt5Gui_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Gui_FOUND: ${Qt5Gui_FOUND}")
MESSAGE("Qt5Gui_EXECUTABLE_COMPILE_FLAGS: ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Network_VERSION: ${Qt5Network_VERSION}")
MESSAGE("Qt5Network_LIBRARIES: ${Qt5Network_LIBRARIES}")
MESSAGE("Qt5Network_INCLUDE_DIRS: ${Qt5Network_INCLUDE_DIRS}")
MESSAGE("Qt5Network_DEFINITIONS: ${Qt5Network_DEFINITIONS}")
MESSAGE("Qt5Network_COMPILE_DEFINITIONS: ${Qt5Network_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Network_FOUND: ${Qt5Network_FOUND}")
MESSAGE("Qt5Network_EXECUTABLE_COMPILE_FLAGS: ${Qt5Network_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Test_VERSION: ${Qt5Test_VERSION}")
MESSAGE("Qt5Test_LIBRARIES: ${Qt5Test_LIBRARIES}")
MESSAGE("Qt5Test_INCLUDE_DIRS: ${Qt5Test_INCLUDE_DIRS}")
MESSAGE("Qt5Test_DEFINITIONS: ${Qt5Test_DEFINITIONS}")
MESSAGE("Qt5Test_COMPILE_DEFINITIONS: ${Qt5Test_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Test_FOUND: ${Qt5Test_FOUND}")
MESSAGE("Qt5Test_EXECUTABLE_COMPILE_FLAGS: ${Qt5Test_EXECUTABLE_COMPILE_FLAGS}")

INCLUDE_DIRECTORIES(
    ${Qt5Core_INCLUDE_DIRS}
    ${Qt5Qml_INCLUDE_DIRS}
    ${Qt5Gui_INCLUDE_DIRS}
    ${Qt5Network_INCLUDE_DIRS}
    ${Qt5Test_INCLUDE_DIRS}
    )

SET(QT_LIBRARIES
    ${Qt5Core_LIBRARIES}
    ${Qt5Qml_LIBRARIES}
    ${Qt5Gui_LIBRARIES}
    ${Qt5Network_LIBRARIES}
    ${Qt5Test_LIBRARIES}
    )

SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTORCC ON)


# configurazione boost
#SET(BOOST_ROOT "/usr/local/boost-1.72.0")
FIND_PACKAGE(Boost 1.72
    REQUIRED
    COMPONENTS
    log
    log_setup
    date_time
    )

MESSAGE("Boost_FOUND: ${Boost_FOUND}")
MESSAGE("Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
MESSAGE("Boost_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}")
MESSAGE("Boost_LIBRARIES: ${Boost_LIBRARIES}")
MESSAGE("Boost_LOG_FOUND: ${Boost_LOG_FOUND}")
MESSAGE("Boost_LOG_LIBRARY: ${Boost_LOG_LIBRARY}")

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

MESSAGE("BOOST_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
MESSAGE("BOOST_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}")

SET(BOOST_LIBRARIES ${Boost_LIBRARIES})
MESSAGE("BOOST_LIBRARIES: ${BOOST_LIBRARIES}")



SET (THIRD_PARTY_PATH "${PROJECT_SOURCE_DIR}/third-party")
MESSAGE("THIRD_PARTY_PATH: ${THIRD_PARTY_PATH}")

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/configure.h.in ${PROJECT_BINARY_DIR}/configure.h)
INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})

SET(PROJECT_SOURCES "" CACHE INTERNAL "sources of project")
SET(PROJECT_HEADERS "" CACHE INTERNAL "header of project")
SET(PROJECT_QML_FILES "" CACHE INTERNAL "qml project files")
SET(PROJECT_JS_FILES "" CACHE INTERNAL "js project files")
SET(PROJECT_QRC_FILES "" CACHE INTERNAL "qrc project files")
SET(PROJECT_TS_FILES "" CACHE INTERNAL "ts project files")
SET(PROJECT_QM_FILES "" CACHE INTERNAL "qm project files")

MESSAGE("PROJECT_SOURCES: ${PROJECT_SOURCES}")
MESSAGE("PROJECT_HEADERS: ${PROJECT_HEADERS}")
MESSAGE("PROJECT_QML_FILES: ${PROJECT_QML_FILES}")
MESSAGE("PROJECT_JS_FILES: ${PROJECT_JS_FILES}")
MESSAGE("PROJECT_QRC_FILES: ${PROJECT_QRC_FILES}")
MESSAGE("PROJECT_TS_FILES: ${PROJECT_TS_FILES}")
MESSAGE("PROJECT_QM_FILES: ${PROJECT_QM_FILES}")

SET(UPDATE_TS CACHE BOOL "") # questo lo setto qui cosi poi lo posso modificare da QtCreator
SET(PROJECT_QSS_PATH "" CACHE INTERNAL "path of qss files") # questo serve per sviluppare il CSS a runtime senza usare il file .qrc (binario)

SET(SUBFOLDERS
    include
    )

FOREACH(FOLDER ${SUBFOLDERS})
    SET(PROJECT_FOLDERS ${PROJECT_FOLDERS} "${PROJECT_SOURCE_DIR}/${FOLDER}")
ENDFOREACH()

# Qui sotto disabilito INCLUDE_DIRECTORIES per le sottocartelle; in questo modo
# obbligo il codice ad avere gli include iniziando con il pattern <life/..>;
# la cartella life viene inclusa attraverso la direttiva CMAKE_INCLUDE_CURRENT_DIR
FOREACH(FOLDER ${PROJECT_FOLDERS})
    INCLUDE_DIRECTORIES(${FOLDER})
    ADD_SUBDIRECTORY(${FOLDER})
ENDFOREACH()


MESSAGE("LINK_LIBRARIES: ${QT_LIBRARIES}")

IF(UPDATE_TS)

    MESSAGE("QT5_CREATE_TRANSLATION")
    FOREACH(TS_ITEM ${PROJECT_TS_FILES})
        QT5_CREATE_TRANSLATION(${PROJECT_SOURCES} ${PROJECT_HEADERS} ${PROJECT_UI_FILES} main.cpp ${TS_ITEM})
    ENDFOREACH(TS_ITEM)

    #SET(PROJECT_QRC_FILES "") # questo serve per evitare problemi di compilazione RCC con CMAKE_AUTORCC ON

ELSE()

    MESSAGE("QT5_ADD_TRANSLATION")
    FOREACH(QM_ITEM ${PROJECT_QM_FILES})
        QT5_ADD_TRANSLATION(${QM_ITEM} ${PROJECT_TS_FILES})
    ENDFOREACH(QM_ITEM)

ENDIF()


ADD_EXECUTABLE(${PROJECT_NAME}-${PROJECT_VERSION}
    main.cpp
    ${PROJECT_SOURCES}
    ${PROJECT_HEADERS}
    ${PROJECT_QML_FILES}
    ${PROJECT_JS_FILES}
    ${PROJECT_QRC_FILES}
    ${PROJECT_TS_FILES}
    ${PROJECT_QM_FILES}
    )

TARGET_LINK_LIBRARIES(${PROJECT_NAME}-${PROJECT_VERSION}
    ${QT_LIBRARIES}
    ${BOOST_LIBRARIES}
    )

#INSTALL(TARGETS ${PROJECT_NAME}-${PROJECT_VERSION}
#        CONFIGURATIONS Debug
#        RUNTIME DESTINATION Debug/bin)


################### TESTS ####################################

ENABLE_TESTING()

SET(TESTS
    Test1
    SettingsTest
    )

FOREACH(TestName ${TESTS})

    ADD_EXECUTABLE(${TestName}
        tests/${TestName}.cpp
        ${PROJECT_SOURCES}
        ${PROJECT_HEADERS}
        )
    ADD_TEST(NAME ${TestName} COMMAND ${TestName})

    TARGET_LINK_LIBRARIES(${TestName}
        PRIVATE Qt5::Test
        ${QT_LIBRARIES}
        ${BOOST_LIBRARIES}
        )

ENDFOREACH()
